generator typegraphql {
  provider = "typegraphql-prisma"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./beta.db"
}

model Genre {
  genreID    Int          @id @default(autoincrement())
  genreName  String       @unique()
  MovieGenre MovieGenre[]
}

model Library {
  libraryID     String          @id @default(uuid())
  userID        String
  name          String
  User          User            @relation(fields: [userID], references: [userID], onDelete: NoAction, onUpdate: NoAction)
  LibraryMovies LibraryMovies[]

  @@index([libraryID, userID])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model LibraryMovies {
  libraryID String
  imdbID    String
  Movie     Movie   @relation(fields: [imdbID], references: [imdbID], onDelete: NoAction, onUpdate: NoAction)
  Library   Library @relation(fields: [libraryID], references: [libraryID], onDelete: NoAction, onUpdate: NoAction)

  @@id([libraryID, imdbID])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Movie {
  imdbID         String          @id
  primaryTitle   String
  originalTitle  String
  isAdult        Boolean
  startYear      Int
  runtimeMinutes Int
  averageRating  Float
  totalVotes     Int
  poster         String?
  LibraryMovies  LibraryMovies[]
  MovieGenre     MovieGenre[]
  UserFavorites  UserFavorites[]

  @@index([imdbID, primaryTitle])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model MovieGenre {
  imdbID  String
  genreID Int
  Genre   Genre  @relation(fields: [genreID], references: [genreID], onDelete: NoAction, onUpdate: NoAction)
  Movie   Movie  @relation(fields: [imdbID], references: [imdbID], onDelete: NoAction, onUpdate: NoAction)

  @@id([imdbID, genreID])
}

model User {
  userID        String          @id @default(uuid())
  username      String          @unique()
  email         String          @unique()
  password      String
  Library       Library[]
  UserFavorites UserFavorites[]

  @@index([userID, email])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model UserFavorites {
  userID String
  imdbID String
  Movie  Movie  @relation(fields: [imdbID], references: [imdbID], onDelete: NoAction, onUpdate: NoAction)
  User   User   @relation(fields: [userID], references: [userID], onDelete: NoAction, onUpdate: NoAction)

  @@id([userID, imdbID])
}
